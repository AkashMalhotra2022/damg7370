{
	"name": "dt_PET_LIC_FCT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Seattle_pet_licenese_Stage",
						"type": "DatasetReference"
					},
					"name": "sourceStg",
					"description": "Import data from Stage table PET_LICENSE_STAGE"
				},
				{
					"dataset": {
						"referenceName": "SSEATTLE_PET_LOCATION_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceLocationDim",
					"description": "Import data from Location Dimension table "
				},
				{
					"dataset": {
						"referenceName": "SEATTLE_PET_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceBreedDim",
					"description": "Import data from Breed Dimension table "
				},
				{
					"dataset": {
						"referenceName": "SEATTLE_PET_DATE_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceDateDim",
					"description": "Import data from Date Dimension table "
				},
				{
					"dataset": {
						"referenceName": "SEATTLE_PET_LIC_FCT",
						"type": "DatasetReference"
					},
					"name": "FctMaxId"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SEATTLE_PET_LIC_FCT",
						"type": "DatasetReference"
					},
					"name": "sinkPETFACT",
					"description": "Export data to SEATTLE_PET_SCHEMA_PET_LIC_FCT"
				}
			],
			"transformations": [
				{
					"name": "joinLocationDim",
					"description": "INNE join on Source and location dim"
				},
				{
					"name": "joinBreedDim",
					"description": "LEFT OUTER join on location dim source Breed Dim"
				},
				{
					"name": "joinDateDim",
					"description": "INNE join on SourceBreedzDim and SourceDateDim"
				},
				{
					"name": "joinFCTMaxId",
					"description": "Cross join date dim with FCTMaxId"
				},
				{
					"name": "surrogateKey",
					"description": "Adding new key PET_LIC_SK starting from 1 with step 1"
				},
				{
					"name": "derivedColumnFCT"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DI_JOB_ID as string (\"59\")",
				"}",
				"source(output(",
				"          LICENSE_ISSUE_DATE as date,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceStg",
				"source(output(",
				"          LOCATION_SK as decimal(10,0),",
				"          ZIP_CODE as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLocationDim",
				"source(output(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreedDim",
				"source(output(",
				"          DT as date,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as date,",
				"          END_DAY_OF_MONTH as date,",
				"          QUARTER_NUM as decimal(2,0),",
				"          DAY_OF_WEEK as decimal(2,0),",
				"          IS_WEEKEND as decimal(1,0),",
				"          YEAR_NUM as decimal(4,0),",
				"          MONTH_NUM as decimal(2,0),",
				"          DAY_NUM as decimal(2,0),",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDateDim",
				"source(output(",
				"          MAX_PET_LIC as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(PET_LIC_SK),0) AS MAX_PET_LIC FROM SEATTLE_PET_SCHEMA.PET_LIC_FCT',",
				"     format: 'query') ~> FctMaxId",
				"sourceStg, sourceLocationDim join(sourceStg@ZIP_CODE == sourceLocationDim@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLocationDim",
				"sourceLocationDim, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreedDim",
				"joinBreedDim, sourceDateDim join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDateDim",
				"joinDateDim, FctMaxId join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFCTMaxId",
				"joinFCTMaxId keyGenerate(output(PET_LIC_ROW as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey derive(PET_LIC_SK = PET_LIC_ROW + MAX_PET_LIC,",
				"          DI_LOAD_DT = currentTimestamp(),",
				"          DI_JOB_ID = $DI_JOB_ID) ~> derivedColumnFCT",
				"derivedColumnFCT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PET_LIC_SK as string,",
				"          DATE_SK as string,",
				"          LOCATION_SK as string,",
				"          BREED_SK as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PET_LIC_SK,",
				"          DATE_SK = LICENSE_ISSUE_DATE,",
				"          LOCATION_SK,",
				"          BREED_SK,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sinkPETFACT"
			]
		}
	}
}