{
	"name": "dataflowFACT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Seattle_pet_licenese_Stage",
						"type": "DatasetReference"
					},
					"name": "sourceStg"
				},
				{
					"dataset": {
						"referenceName": "SEATTLE_PET_LOCATION_DATASET",
						"type": "DatasetReference"
					},
					"name": "sourceLocationDim"
				},
				{
					"dataset": {
						"referenceName": "SEATTLE_PET_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceBreedDim"
				},
				{
					"dataset": {
						"referenceName": "SEATTLE_PET_DATE_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceDateDim"
				},
				{
					"dataset": {
						"referenceName": "SEATTLE_PET_LIC_FCT",
						"type": "DatasetReference"
					},
					"name": "FCTMaxId"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SEATTLE_PET_LIC_DS_SNOWFLAKE",
						"type": "DatasetReference"
					},
					"name": "sinkFctTable",
					"description": "Export data to SEATTLE_PET_SCHEMA_PET_LIC_FCT"
				}
			],
			"transformations": [
				{
					"name": "joinSourceLocationDim",
					"description": "Inner Join Source LocationDim"
				},
				{
					"name": "joinSourceBreedDim"
				},
				{
					"name": "joinSourceDateDim"
				},
				{
					"name": "joinMaxFctId"
				},
				{
					"name": "selectFctColumns"
				},
				{
					"name": "surrogateKeyFct"
				},
				{
					"name": "derivedColumnFCT"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceStg",
				"source(output(",
				"          LOCATION_SK as string,",
				"          ZIP_CODE as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLocationDim",
				"source(output(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreedDim",
				"source(output(",
				"          DT as string,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as string,",
				"          END_DAY_OF_MONTH as string,",
				"          QUARTER_NUM as string,",
				"          DAY_OF_WEEK as string,",
				"          IS_WEEKEND as string,",
				"          YEAR_NUM as string,",
				"          MONTH_NUM as string,",
				"          DAY_NUM as string,",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDateDim",
				"source(output(",
				"          MAX_LIC as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(PET_LIC_SK),0) AS MAX_LIC FROM SEATTLE_PET_SCHEMA.PET_LIC_FCT',",
				"     format: 'query') ~> FCTMaxId",
				"sourceStg, sourceLocationDim join(sourceStg@ZIP_CODE == sourceLocationDim@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSourceLocationDim",
				"joinSourceLocationDim, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSourceBreedDim",
				"joinSourceBreedDim, sourceDateDim join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSourceDateDim",
				"joinSourceDateDim, FCTMaxId join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMaxFctId",
				"joinMaxFctId select(mapColumn(",
				"          LOCATION_SK,",
				"          BREED_SK,",
				"          DI_JOB_ID = sourceStg@DI_JOB_ID,",
				"          DI_LOAD_DT = sourceStg@DI_LOAD_DT,",
				"          DATE_DIM_SK,",
				"          PET_LIC_SK = MAX_LIC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFctColumns",
				"selectFctColumns keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyFct",
				"surrogateKeyFct derive(PET_LIC_SK = PET_LIC_SK + RowNum,",
				"          DI_LOAD_DT = currentTimestamp()) ~> derivedColumnFCT",
				"derivedColumnFCT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PET_LIC_SK as string,",
				"          DATE_SK as string,",
				"          LOCATION_SK as string,",
				"          BREED_SK as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PET_LIC_SK,",
				"          DATE_SK = DATE_DIM_SK,",
				"          LOCATION_SK,",
				"          BREED_SK,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sinkFctTable"
			]
		}
	}
}